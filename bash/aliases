# Ant
######
alias aa="ant -Dlint.failonerror=false all"
alias aba="ant build-alloy"
alias abm="ant build-modules"
alias abt='ant build-themes'
alias abs='ant build-skins'
alias acd='ant clean deploy'
alias ad='ant deploy'
alias ar="ant release"
complete -C ~/configFiles/bash/complete-ant-cmd.pl build.sh ant

# Utility
######
alias reload='source ~/.bash_profile'

function sbp() {
	source ~/.bash_profile
	echo "Refreshed ~/.bash_profile"
}

# Git
######
# "g" to "git" command, but preserving git-completion
#source ~/configFiles/bash/git-completion.bash
alias g="git"
complete -o default -o nospace -F _git g

# Git help
alias gh="git help"

function mygithelp {
	local cur
	_get_comp_words_by_ref -n =: cur
	__git_compute_porcelain_commands
	__gitcomp "$__git_porcelain_commands $(__git_aliases)"
}

complete -o default -o nospace -F mygithelp gh

function git_track() {
	echo "\n[branch \"$1\"]\n\tremote = origin\n\tmerge = refs/heads/$1" >> ".git/config"
}

# Update git branches
alias upAll="upM; up61x; upEE61x; up6110; up60x"
alias upM="git checkout master; git pull upstream master; git push origin master"
alias up61x="git checkout 6.1.x; git pull upstream 6.1.x; git push origin 6.1.x"
alias upEE61x="git checkout ee-6.1.x; git pull upstream ee-6.1.x; git push origin ee-6.1.x"
alias upEE6110="git checkout ee-6.1.10; git pull upstream ee-6.1.10; git push origin ee-6.1.10"
alias upEE60x="git checkout ee-6.0.x; git pull upstream ee-6.0.x; git push origin ee-6.0.x"

alias upEE15x="git checkout ee-1.5.x; git pull upstream ee-1.5.x; git push origin ee-1.5.x"
alias up15x="git checkout 1.5.x; git pull upstream 1.5.x; git push origin 1.5.x"
alias upEE10x="git checkout ee-1.0.x; git pull upstream ee-1.0.x; git push origin ee-1.0.x"

# MySQL
######
# MySQL alias'
alias mysqladmin="/usr/local/mysql/bin/mysqladmin"

function mysqlexec {
	mysql -u root -p -e "$1";
}

function createdb {
	mysqlexec "create database \`$1\` CHARACTER SET utf8;";
}

function dropdb {
	mysqlexec "drop database if exists \`$1\`;";
}

function cleardb {
	mysqlexec "drop database if exists \`$1\`; create database \`$1\`
CHARACTER SET utf8;"
}

# Navigation
######

function cdl {
	cd $1;
	ls -l
}

function upl {
	cdl ..
}

# Move up N levels of the directory tree
# Or by typing in some dir in the PWD
# eg. Assuming your PWD is "/Volumes/Users/natecavanaugh/Documents/stuff"
# 	  `up 2` moves up 2 directories to "/Volumes/Users/natecavanaugh"
#	  `up 2/` and pressing tab will autocomplete the dirs in "/Volumes/Users/natecavanaugh"
#	  `up Users` navigate to "/Volumes/Users"
#	  `up us` and pressing tab will autocomplete to "/Volumes/Users"
function up {
	dir="../"
	if [ -n "$1" ]; then
		if [[ $1 =~ ^[0-9]+$ ]]; then
			strpath=$( printf "%${1}s" );
			dir=" ${strpath// /$dir}"
		else
			dir=${PWD%/$1/*}/$1
		fi
	fi

	cd $dir
}

function _get_up {
	local cur
	local dir
	local results
	COMPREPLY=()
	#Variable to hold the current word
	cur="${COMP_WORDS[COMP_CWORD]}"

	local lower_cur=`echo ${cur##*/} | tr [:upper:] [:lower:]`

	# Is the arg a number or number followed by a slash
	if [[ $cur =~ ^[0-9]+/? ]]; then
		dir="../"
		strpath=$( printf "%${cur%%/*}s" );
		dir=" ${strpath// /$dir}"

		# Is the arg just a number?
		if [[ $cur =~ ^[0-9]+$ ]]; then
			COMPREPLY=($(compgen -W "${dir}"))
		else
			if [[ $cur =~ /.*$ ]]; then
				cur="${cur##*/}"
			fi

			results=$(for t in `cd $dir && ls -d */`; do if [[ `echo $t | tr [:upper:] [:lower:]` == "$lower_cur"* ]]; then echo "${t}"; fi done)

			COMPREPLY=($(compgen -P "$dir" -W "${results}"))
			# COMPREPLY=($(compgen -P "$dir" -W "${results}" $cur))
		fi
	else
		# Is the arg a word that we can look for in the PWD
		results=""
		cur_pwd=${PWD%/*}

		for t in `echo $cur_pwd | tr "/" "\n"`; do
			if [[ `echo $t | tr [:upper:] [:lower:]` == "$lower_cur"* ]]; then
				results="$results ${t}";
			fi
		done

		COMPREPLY=($(compgen -W "${results}"))
	fi	
}

#Assign the auto-completion function _get for our command get.
complete -F _get_up up

# Misc
######
# Process finder
# @argument name of process
function pf {
	ps ax | grep "$1" | grep -v grep | awk '{ print $1 }'
}

# Process killer
# @argument name of process
function pfkill {
	pf $1 | xargs kill -9
	#ps -ef | grep PROCESS | grep -v grep | awk '{print $2}' | xargs kill -9
}

# Kill java :(
function pfkj {
	pfkill "java"
}

# Simpler grep
# @argument (optional) path
function gr {
	grep -R "$1" "${2:-.}"
	# echo $1 ${2:.}
}

# Find file by name
alias fn='find . -name '

# Search history
alias hs="history|grep"

# QuickLook file
alias qlf='qlmanage -p "$@" >& /dev/null'

# Open Sublime Text 2
alias subl='open -a "Sublime Text 2"'

# Functions
######

# Extract Git commit ID from generated alloy zip
# @argument path to zip
function az {
	if [[ ! $1 =~ '.zip'$ ]]; then
		echo "This command only works with zip files :)"
		return 1;
	fi

	delfile=0

	name=$1
	if [[ $1 == *:* ]]; then
		treeish=$1
		name="/tmp/alloy_${RANDOM}.zip"
		delfile=1
		git show -p $treeish > $name
	fi

	unzip -z $name;
	
	[[ $delfile == 1 ]] && rm $name;
}

function auis_impl {
	cd $1;
	git log -1 --format="%h" | tr -d '\n'
}

function auis () {
	auis_impl ${AUI_TRUNK_PATH}
}

function auisee () {
	auis_impl ${AUI_EE_PATH}
}

function auic () {
	sha=$(auis)
	echo $sha | tr -d '\n' | pbcopy && echo "Copied $sha to clipboard."
}

function auicee () {
	sha=$(auisee)
	echo $sha | tr -d '\n' | pbcopy && echo "Copied $sha to clipboard."
}

# Get Last JIRA ID from the git logs
function jid {
	git log -1 --oneline | grep -Eo "([A-Z]{3,}-)([0-9]+)"
}

function mjid {
	echo "`jid` - ${1:-Source formatting}"
}

function jspfcss () {
	cd "${LFR_TRUNK_PORTAL_HTML_PATH}/portal/css";
	filelist=''
	for f in `ls -R | grep -E '.jspf'`; do 
		filelist="$filelist '$f',";
	done
	echo $filelist
}


function gfd() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no search string entered"
	else 
		git log --grep=${1}
	fi
}

function gpl() {
	set ${1}
	set ${2}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no git selected"
	else 
		if [ "${2}" == "" ]; then
			clear
			echo "Error $? - no branch selected"
		else
			git pull git://github.com/${1} ${2}
		fi
	fi
}

function gps() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no branch selected"
	else 
		git checkout ${1}
		git push origin ${1}
	fi
}

function gup() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else 
		if [ "${1}" == "lfr" ]; then
			pt lfr
		else
			if [ "${1}" == "at" ]; then
				a t
			else 
				if [ "${1}" == "aee" ]; then
					a ee
				else
					pt ${1}
				fi
			fi
		fi

		updateMaster
	fi
}

# Pull Request (https://github.com/greneholt/git-pull-request)
alias gitpr="source /Volumes/Projects/liferay/repos/git-tools/git-pull-request/git-pull-request.sh"

# ant deploy-fast
function df() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else 
		if [ "${1}" == "lfr" ]; then
			ptl lfr
		else
			if [ "${1}" == "ee" ]; then
				ptl ee
			else
				ptl ${1}
			fi
		fi

		cd "portal-web" && ant deploy-fast
	fi
}

# build
function bl() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else 
		if [ "${1}" == "lfr" ]; then
			cn lfr && ptl lfr && ant deploy
		else
			if [ "${1}" == "ee" ]; then
				cn ee && ptl ee && ant deploy
			else
				if [ "${1}" == "at" ]; then
					cop t && ptl lfr && cd "portal-web" && ant build-alloy && touch -c "/docroot/html/portal/css.jsp"
				else
					if [ "${1}" == "aee" ]; then
						cop ee && ptl 6.0.x && cd "portal-web" && ant build-alloy && touch -c "/docroot/html/portal/css.jsp"
					else
						cn ${1} && ptl ${1} && ant deploy
					fi
				fi
			fi
		fi
	fi
}

# clean
function cn() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		if [ "${1}" == "lfr" ]; then
			prj lfr
		else
			if [ "${1}" == "ee" ]; then
				prj ee
			else
				prj ${1}
			fi
		fi

		cd "tomcat/" && rm -rf temp && rm -rf work && rm -rf temphsperfdata_jmak
	fi
}

# reset
function rt() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		if [ "${1}" == "lfr" ]; then
			cn lfr && rm -rf webapps && prj lfr && rm -rf data && ptl lfr && ant all
		else
			if [ "${1}" == "ee" ]; then
				cn ee && rm -rf webapps && prj ee && rm -rf data && ptl ee && ant all
			else
				cn ${1} && rm -rf webapps && prj ${1} && rm -rf data && ptl ${1} && ant all
			fi
		fi
	fi
}

# restart
function rs() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		if [ "${1}" == "lfr" ]; then
			cn lfr && bl lfr && st lfr
		else
			if [ "${1}" == "ee" ]; then
				cn ee && bl ee && st ee
			else
				cn ${1} && bl ${1} && st ${1}
			fi
		fi
	fi
}

# start
function st() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		./liferay ${1}
	fi
}

# start & build
function sb() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else 
		if [ "${1}" == "lfr" ]; then
			bl lfr && st lfr
		else
			if [ "${1}" == "ee" ]; then
				bl ee && st ee
			else
				if [ "${1}" == "at" ]; then
					bl at && st lfr
				else
					if [ "${1}" == "aee" ]; then
						bl aee && st 6.0.x
					else
						bl ${1} && st ${1}
					fi
				fi
			fi
		fi
	fi
}

# AlloyUI alias'
function a() {
	set ${1}
	if [ "${1}" == "t" ]; then
		cd ${AUI_TRUNK_PATH}
	else
		if [ "${1}" == "ee" ]; then
			cd ${AUI_15EE_PATH}
		else
			cd ${AUI_10EE_PATH}
		fi
	fi
}