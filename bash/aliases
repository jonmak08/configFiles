# Utility
######
alias sbp='source ~/.bash_profile'

# Do a checksum comparison of two files to verify if
# two files are 100% equal. Useful for testing if
# one file has some invisible character or imperceptible
# difference.
# @argument first file
# @argument second file

function compare () {
	if [[ -f "$1" && -f "$2" ]]; then
		file_1=$(md5 "$1" | awk '{ print $4 }')
		file_2=$(md5 "$2" | awk '{ print $4 }')

		if [[ $file_1 == $file_2 ]]; then
			echo "Both files are equal ($file_1)"
		else
			echo "$1 ($file_1) is different from $2 ($file_2)"
		fi
	else
		echo "One or both of these is not a file"
	fi
}

# Git
######
alias myg='cd $GIT_HOME;'

# Pull Request (https://github.com/greneholt/git-pull-request)
alias gpr="source /Volumes/Projects/repo/git-tools/git-pull-request/git-pull-request.sh"

# "g" to "git" command, but preserving git-completion
#source ~/configFiles/bash/git-completion.bash
alias g="git"
complete -o bashdefault -o default -o nospace -F _git g 2>/dev/null || complete -o default -o nospace -F _git g

# Git ref head
alias refHead="echo ref: refs/heads/master >.git/HEAD"

# Github pull from user
alias gp='github-pull'

# Git help
alias gh="git help"

function mygithelp {
	local cur
	_get_comp_words_by_ref -n =: cur
	__git_compute_porcelain_commands
	__gitcomp "$__git_porcelain_commands $(__git_aliases)"
}

complete -o default -o nospace -F mygithelp gh

function git_track() {
	echo "\n[branch \"$1\"]\n\tremote = origin\n\tmerge = refs/heads/$1" >> ".git/config"
}

# Update git branches
function gup() {
	branch=${1-$(git getm)}
	git checkout ${branch}; git pull upstream ${branch}; git push origin ${branch};
}

# MySQL
######
# MySQL alias'
alias mysqladmin="/usr/local/mysql/bin/mysqladmin"

function mysqlexec {
	mysql -u root -p -e "$1";
}

function createdb {
	mysqlexec "create database \`$1\` CHARACTER SET utf8;";
}

function dropdb {
	mysqlexec "drop database if exists \`$1\`;";
}

function cleardb {
	mysqlexec "drop database if exists \`$1\`; create database \`$1\`
CHARACTER SET utf8;"
}

# Navigation
######

function cdl {
	cd $1;
	ls -l
}

function upl {
	cdl ..
}

# Convenience function for moving up levels in the path to the current working directory.
# Synopsis:
#     `up [n]` moves n levels up in the directory hierarchy; default is 1.
#     `up dirname` changes to the closest ancestral directory by that name, regardless of case.
#     `up absolutepath` changes to the specified absolute path; primarily used with command completion (see below).
# Additionally, if command completion via _complete_up() is in effect (<tab> represents pressing the tab key):
#      `up [n]<tab>` replaces n with the absolute path of the directory n levels up (default is 1).
#      `up dirnameprefix<tab>` replaces dirnameprefix with the absolute path of the closest ancestral directory whose name starts with the specified name prefix, terminated with '/'.
#         Whether dirnameprefix is matched case-insensitively or not depends on whether case-insensitive command completion is turned on globally via ~/.inputrc or /etc/inputrc.
#       In both cases the completed absolute path ends in '/', allowing you to optionally continue completion based on that path's subdirectories.
# Notes:
#   - Directory names with characters that need escaping when unquoted (such as spaces) are handled correctly.
#   - For command completion, to specify names that need escaping when unquoted, specify them escaped rather than quoted;
#     e.g., `up my \di<tab>' to match 'my dir' in the ancestral path.
function up {

	local dir='../'   # By default, go up 1 level.

	[[ "$1" == '-h' || "$1" == '--help' ]] && { echo -e "usage:\n\t$FUNCNAME [n]\n\t$FUNCNAME dirname\n  Moves up N levels in the path to the current working directory, 1 by default.\n  If DIRNAME is given, it must be the full name of an ancestral directory (case does not matter).\n  If there are multiple matches, the one *lowest* in the hierarchy is changed to." && return 0; }

	if [[ -n "$1" ]]; then
		if [[ $1 =~ ^[0-9]+$ ]]; then   # A number, specifying the number of levels to go up.
			local strpath=$( printf "%${1}s" ) # This creates a string with as many spaces as levels were specified.
			dir=${strpath// /$dir}  # Create the go-up-multiple-levels cd expression by replacing each space with '../'
		elif [[ $1 =~ ^/ ]]; then  # Already an absolute path? Use as is. (Typically, this happens as a result of command-line completion invoked via _complete_up().)
			dir=$1
		else # Assumed to be the full name of an ancestral directory (regardless of level), though the case needn't match.
			# Note: On case-insensitive HFS+ volumes on a Mac (the default), you can actually use case-insensitive names with 'cd' and the resulting working directory will be reported in that case(!).
			#       This behavior is NOT related to whether case-insensitivity is turned on for command completion or not.
			# !! Strangely, the 'nocasematch' shopt setting has no effect on variable substitution, so we need to roll our own case-insensitive substitution logic here.
			local wdLower=$(echo -n "$PWD" | tr '[:upper:]' '[:lower:]')
			local tokenLower=$(echo -n "$1" | tr '[:upper:]' '[:lower:]')
			local newParentDirLower=${wdLower%/$tokenLower/*}   # If the specified token is a full ancestral directory name (irrespective of case), this substitution will give us its parent path.
			[[ "$newParentDirLower" == "$wdLower"  ]] && { echo "$FUNCNAME: No ancestral directory named '$1' found." 1>&2; return 1; }
			local targetDirPathLength=$(( ${#newParentDirLower} + 1 + ${#tokenLower} ))
			# Get the target directory's name in the exact case it's defined.
			dir=${PWD:0:$targetDirPathLength}
		fi
	fi

	# Change to target directory; use of 'pushd' allows use of 'popd' to return to previous working directory.
	pushd "$dir" 1>/dev/null
}

# Companion function to up(), used for command completion.
# To install it, run (typically in your bash profile):
# `complete -o filenames -F _complete_up up`
# Note: The '-o filenames' option ensures that:
#   (a) paths of directories returned via $COMPREPLY leave the cursor at the terminating "/" for potential further completion
#   (b) paths with embeddes spaces and other characters requiring \-escaping are properly escaped.
function _complete_up {

	COMPREPLY=() # Initialize the array variable through which completions must be passed out.

	# Retrieve the current command-line token, i.e., the one on which completion is being invoked.
	local curToken=${COMP_WORDS[COMP_CWORD]}
	# Remove \ chars., presumed to be escape characters in the current token, which is presumed to be *unquoted*. This allows invoking completion on a token with embedded space, e.g., '$FUNCNAME some\ directory'
	# !! Strictly speaking, we'd have to investigate whether the token was specified with quotes on the command line and, if quoted,  NOT unescape. Given that the purpose of this function is expedience, we
	# !! assume that the token is NOT quoted and that all backslashes are therefore escape characters to be removed.
	curToken=${curToken//'\'}

	if [[ $curToken =~ ^/ ]]; then # Token is an absolute path (typically as a result of a previous completion) -> complete with directory names, similar to 'cd' (although the latter, curiously, also completes *file* names).

		local IFS=$'\n' # Make sure that the output of compgen below is only split along lines, not also along spaces (which the default $IFS would do).
		COMPREPLY=($(compgen -o dirnames -- "$curToken"))

	elif [[ $curToken =~ ^[0-9]+/? ]]; then # Token is a number (optionally followed by a slash) -> replace the token to be completed with the absolute path of the directory N levels above, where N is the number specified.

		# Create a go-up-multiple-levels cd expression that corresponds to the number of levels specified.
		local strpath=$( printf "%${curToken%%/*}s" ) # This creates a string with as many spaces as levels were specified.
		local upDirSpec=${strpath// /../}  # Create the go-up-multiple-levels cd expression by replacing each space with '../'

		# Expand to absolute path (ending in '/' to facilitate optional further completion) and return.
		local dir=$(cd "$upDirSpec"; echo -n "$PWD/")
		if [[ "$dir" == '//' ]]; then dir='/'; fi # In case the target dir turns out to be the root dir, we've accidentally created '//' in the previous statement; fix it.
		# !! Note that the path will appear *unquoted* on the command line and must therefore be properly \-escaped (e.g., a ' '  as '\ ').
		# !! Escaping is performed automatially by virtue of defining the compspec with '-o filenames' (passed to 'complete').
		COMPREPLY=("$dir")

	else # Token is a name -> look for a prefix match among all the ancestral path components; use the first match found (i.e., the next match up in the hierarchy).

		# Determine if we should do case-insensitive matching or not, depending on whether cases-insensitive completion was turned on globally via ~/.inputrc or /etc/inputrc.
		# We do this to be consistent with the default command completion behavior.
		local caseInsensitive=0
		bind -v | egrep -i '\bcompletion-ignore-case[[:space:]]+on\b' &>/dev/null && caseInsensitive=1

		# If we need to do case-INsensitive matching in this function, we need to make sure the 'nocasematch' shell option is (temporarily) turned on.
		local nocasematchWasOff=0
		if (( caseInsensitive )); then
			nocasematchWasOff=1
			shopt nocasematch >/dev/null && nocasematchWasOff=0
			(( nocasematchWasOff )) && shopt -s nocasematch >/dev/null
		fi

		local pathSoFar=''
		local matchingPath=''
		# Note: By letting the loop iterate over ALL components starting at the root, we end up with the *last* match, i.e. the one *lowest* in the hierarchy (closed to the current working folder).
		# !! We COULD try to return multiple matches, if applicable, but in practice we assume that there'll rarely be paths whose components have identical names or prefixes.
		# !! Thus, should there be multiple matches, the user can reinvoke the same command to change to the next-higher match (though the command must be typed again), and so forth.
		local parentPath=${PWD%/*}
		local IFS='/' # This will break our parent path into components in the 'for' loop below.
		local name
		for name in ${parentPath:1}; do
			pathSoFar+=/$name
			if [[ "$name" == "$curToken"* ]]; then
				matchingPath="$pathSoFar/"
			fi
		done

		# Restore the state of 'nocasematch', if necessary.
		(( caseInsensitive && nocasematchWasOff )) && shopt -u nocasematch >/dev/null

		# If match was found, return its absolute path (ending in / to facilitate optional further completion).
		# !! Note that the path will appear *unquoted* on the command line and must therefore be properly \-escaped (e.g., a ' '  as '\ ').
		# !! Escaping is performed automatially by virtue of defining the compspec with '-o filenames' (passed to 'complete').
		[[ -n "$matchingPath" ]] && COMPREPLY=("$matchingPath")

	fi
}

#Assign the auto-completion function _get for our command get.
complete -o filenames -F _complete_up up

# Misc
######

# details
# Shows either the file name, alias info, or function definition
# for a given executable.
# @argument name of function, alias, or script to list the details for
function details {
	if [[ `command -v "$1"` ]]; then
		cmd_type="$(type -t $1)"

		if [[ $cmd_type == "alias" ]]; then
			alias "$1" 2> /dev/null
		elif [[ $cmd_type == "file" ]]; then
			which "$1" 2> /dev/null
		elif [[ $cmd_type == "function" ]]; then
			declare -f "$1" 2> /dev/null
		else
			type -a "$1" 2> /dev/null
		fi
	else
		echo "$1 doesn't seem to exist"
	fi

	return 1
}

# Process finder
# @argument name of process
function pf {
	ps ax | grep "$1" | grep -v grep | awk '{ print $1 }'
}

# Process killer
# @argument name of process
function pfkill {
	pf $1 | xargs kill -9
	#ps -ef | grep PROCESS | grep -v grep | awk '{print $2}' | xargs kill -9
}

# Kill java :(
function pfkj {
	pfkill "java"
}

# Simpler grep
# @argument (optional) path
function gr {
	grep -R "$1" "${2:-.}"
	# echo $1 ${2:.}
}

# Find file by name
alias fn='find . -name '

# Search history
alias hs="history | grep --color=auto"

# QuickLook file
alias qlf='qlmanage -p "$@" >& /dev/null'

# Open Sublime Text 2
alias so='/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl'

# Functions
######

# Resolves a symlink to determine where it points to
# @argument path to symlink

function resolve {
	[ ! -h "$1" ] && echo "$1" || (local link="$(expr "$(command ls -ld -- "$1")" : '.*-> \(.*\)$')"; cd $(dirname $1); resolve "$link" | sed "s|^\([^/].*\)\$|$(dirname $1)/\1|");
}

# Get Last JIRA ID from the git logs
function jid {
	git log -1 --oneline | grep -Eo "([A-Z]{3,}-)([0-9]+)"
}

function mjid {
	echo "`jid` - ${1:-Source formatting}"
}

# Check any website to see if it is running on Liferay
# as well as what version it is.
# This assumes they haven't disabled the Liferay-Portal header
# @argument url

function lfrv () {
	curl -ILs $1 | grep --color=auto "Liferay"
}

# Ant
######

alias aa="ant -Dlint.failonerror=false all"
alias aa="ant deploy"
alias aba="ant build-alloy"
alias abm="ant build-modules"
alias abs='ant build-skins'
alias acd='ant clean deploy'
alias ad='ant deploy'
alias ar="ant release"
# complete -C ~/configFiles/bash/complete-ant-cmd.pl build.sh ant

# ant deploy-fast
function df() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		to ${1} && pw && ant deploy-fast
	fi
}

# Liferay Functions
######

# build
function bl() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		cn ${1} && to ${1}-portal && ant deploy
	fi
}

# clean
function cn() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		to ${1}-tomcat && rm -rf temp && rm -rf work && rm -rf temphsperfdata_jmak
	fi
}

# reset
function rt() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		cn ${1} && rm -rf webapps && to ${1} && rm -rf data && db-hsql ${1} && to ${1}-portal && ant all && st ${1} && to ${1}-portal
	fi
}

# rebuild database
function db-hsql() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		to ${1}-portal && cd sql && ant rebuild-hypersonic
	fi
}

# restart
function rs() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		cn ${1} && bl ${1} && st ${1}
	fi
}

# start
function st() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		to ${1}-tomcat && cd bin && ./catalina.sh run
	fi
}

# start & build
function sb() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		bl ${1} && st ${1}
	fi
}

# Navigate to the portal-web directory of any Liferay repo

function pw () {
	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	if [[ -n "$top_level" && -d "$top_level/portal-web" ]]; then
		cd "$top_level/portal-web"
	else
		echo "Nowhere to go..."
	fi
}

# Navigate to the portal-impl directory of any Liferay repo

function pi () {
	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	if [[ -n "$top_level" && -d "$top_level/portal-impl" ]]; then
		cd "$top_level/portal-impl"
	else
		echo "Nowhere to go..."
	fi
}

# Navigate to the portal-web directory and run ant build-themes

function abt {
	start_dir="$PWD"

	pw && ant build-themes

	if [[ "$PWD" != "$start_dir" ]]; then
		cd "$start_dir";
	fi
}

# Navigate to the portal-impl directory and run ant format-source

function afs {
	start_dir="$PWD"

	pi && ant format-source

	if [[ "$PWD" != "$start_dir" ]]; then
		cd "$start_dir";
	fi
}

# Alloy Functions
######
alias gr="grunt"
alias y="yeti"