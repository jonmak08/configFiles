# Utility
######
alias sbp='source ~/.bash_profile'

# alias to node-webkit
alias nw="/Applications/node-webkit.app/Contents/MacOS/node-webkit"

# Git
######

# Pull Request (https://github.com/greneholt/git-pull-request)
alias gpr="source /Volumes/Projects/repo/git-tools/git-pull-request/git-pull-request.sh"

# "g" to "git" command, but preserving git-completion
alias g="git"
complete -o bashdefault -o default -o nospace -F _git g 2>/dev/null || complete -o default -o nospace -F _git g

# Git ref head
alias refHead="echo ref: refs/heads/master >.git/HEAD"

# Github pull from user
alias gp='github-pull'

# Git help
alias gh="git help"

function mygithelp {
	local cur
	_get_comp_words_by_ref -n =: cur
	__git_compute_porcelain_commands
	__gitcomp "$__git_porcelain_commands $(__git_aliases)"
}

complete -o default -o nospace -F mygithelp gh

function git_track() {
	echo "\n[branch \"$1\"]\n\tremote = origin\n\tmerge = refs/heads/$1" >> ".git/config"
}

# Update git branches
function gup() {
	branch=${1-$(git getm)}
	git checkout ${branch}; git pull upstream ${branch}; git push origin ${branch};
}

# SmartGit
alias sg="/Applications/SmartGitHg\ 5.app/Contents/MacOS/SmartGit"
alias sgo="sg --open"
alias sgl="sg --log"
alias sgb="sg --blame"

# MySQL
######
function mysqlexec {
	mysql -u root -p -e "$1";
}

function createdb {
	mysqlexec "create database \`$1\` CHARACTER SET utf8;";
}

function dropdb {
	mysqlexec "drop database if exists \`$1\`;";
}

function cleardb {
	mysqlexec "drop database if exists \`$1\`; create database \`$1\`
CHARACTER SET utf8;"
}

# Misc
######

# details
# Shows either the file name, alias info, or function definition
# for a given executable.
# @argument name of function, alias, or script to list the details for
function details {
	if [[ `command -v "$1"` ]]; then
		cmd_type="$(type -t $1)"

		if [[ $cmd_type == "alias" ]]; then
			alias "$1" 2> /dev/null
		elif [[ $cmd_type == "file" ]]; then
			which "$1" 2> /dev/null
		elif [[ $cmd_type == "function" ]]; then
			declare -f "$1" 2> /dev/null
		else
			type -a "$1" 2> /dev/null
		fi
	else
		echo "$1 doesn't seem to exist"
	fi

	return 1
}

# Process finder
# @argument name of process
function pf {
	ps ax | grep "$1" | grep -v grep | awk '{ print $1 }'
}

# Process killer
# @argument name of process
function pfkill {
	pf $1 | xargs kill -9
	#ps -ef | grep PROCESS | grep -v grep | awk '{print $2}' | xargs kill -9
}

# Kill java :(
function pfkj {
	pfkill "java"
}

# Simpler grep
# @argument (optional) path
function gr {
	grep -R "$1" "${2:-.}"
	# echo $1 ${2:.}
}

# Find file by name
alias fn='find . -name '

# Search history
alias hs="history | grep --color=auto"

# QuickLook file
alias qlf='qlmanage -p "$@" >& /dev/null'

# Functions
######

# Resolves a symlink to determine where it points to
# @argument path to symlink

function resolve {
	[ ! -h "$1" ] && echo "$1" || (local link="$(expr "$(command ls -ld -- "$1")" : '.*-> \(.*\)$')"; cd $(dirname $1); resolve "$link" | sed "s|^\([^/].*\)\$|$(dirname $1)/\1|");
}

# Get Last JIRA ID from the git logs
function jid {
	git log -1 --oneline | grep -Eo "([A-Z]{3,}-)([0-9]+)"
}

function cammjid {
	echo "`jid` - ${1:-Source formatting}" | pbcopy
}

function cagsjid {
	echo "`jid` - ${1:-General source formatting}" | pbcopy
}

# Check any website to see if it is running on Liferay
# as well as what version it is.
# This assumes they haven't disabled the Liferay-Portal header
# @argument url

function lfrv () {
	curl -ILs $1 | grep --color=auto "Liferay"
}

# Ant
######

alias aa="ant -Dlint.failonerror=false all"
alias aba="ant build-alloy"
alias abm="ant build-modules"
alias abs='ant build-skins'
alias acd='ant clean deploy'
alias ad='ant deploy'
alias afs="ant format-source"
alias ar="ant release"

complete -C $ANT_AUTOCOMPLETE build.sh ant

# ant deploy-fast
function df() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		to ${1} && pw && ant deploy-fast
	fi
}

# Liferay Functions
######

# build
function bl() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		cn ${1} && to ${1} && ant deploy
	fi
}

# clean
function cn() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		to ${1}tcat && rm -rf temp && rm -rf work && rm -rf temphsperfdata_jmak
	fi
}

# reset
function rt() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		cn ${1} && rm -rf webapps && to ${1} && rm -rf data && db-hsql ${1} && to ${1} && ant all && st ${1} && to ${1}
	fi
}

# rebuild database
function db-hsql() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		to ${1} && cd sql && ant rebuild-hypersonic
	fi
}

# restart
function rs() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		cn ${1} && bl ${1} && st ${1}
	fi
}

# start
function st() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		to ${1}tcat && cd bin && ./catalina.sh run
	fi
}

# start & build
function sb() {
	set ${1}
	if [ "${1}" == "" ]; then
		clear
		echo "Error $? - no project selected"
	else
		bl ${1} && st ${1}
	fi
}

# Navigate to the portal-web directory of any Liferay repo

function pw () {
	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	if [[ -n "$top_level" && -d "$top_level/portal-web" ]]; then
		cd "$top_level/portal-web"
	else
		echo "Nowhere to go..."
	fi
}

# Navigate to the portal-impl directory of any Liferay repo

function pi () {
	top_level=$(git rev-parse --show-toplevel 2>/dev/null)
	if [[ -n "$top_level" && -d "$top_level/portal-impl" ]]; then
		cd "$top_level/portal-impl"
	else
		echo "Nowhere to go..."
	fi
}

# Navigate to the portal-web directory and run ant build-themes

function abt {
	start_dir="$PWD"

	pw && ant build-themes

	if [[ "$PWD" != "$start_dir" ]]; then
		cd "$start_dir";
	fi
}

# Navigate to the portal-impl directory and run ant format-source

function afs {
	start_dir="$PWD"

	pi && ant format-source

	if [[ "$PWD" != "$start_dir" ]]; then
		cd "$start_dir";
	fi
}

# Alloy Functions
######
alias gu="gulp"
alias gr="grunt"
alias ye="yeti"
alias yo="yogi"